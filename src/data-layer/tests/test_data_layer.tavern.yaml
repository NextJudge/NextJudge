test_name: Validate data layer endpoints

strict:
  - json:off

marks:
  - usefixtures:
    - setup_tests
    - five_minutes_from_now
    - five_minutes_ago
    - ten_minutes_from_now
    
includes:
  - !include globals.yaml

stages:

  ### /v1/users

  - name: create user with no email
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        name: "{test_username}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create user with no username
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        email: "{test_email}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create new user
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        name: "{test_username}"
        email: "{test_email}"
        image: "linktoimage.com/joe.png"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 201
      json:
        name: "{test_username}"
        email: "{test_email}"
        image: "linktoimage.com/joe.png"
        is_admin: false
      save:
        json:
          user_id: id
          join_date: join_date

  - name: try to create user with duplicate username
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        name: "{test_username}"
        email: "{test_email_2}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: try to create user with duplicate email
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        name: "{test_username_2}"
        email: "{test_email}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create another new user
    request: 
      url: "{host}/v1/users"
      method: POST
      json:
        name: "{test_username_2}"
        email: "{test_email_2}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 201
      save:
        json:
          user_id_2: id

  - name: get non existent user
    request: 
      url: "{host}/v1/users/00000000-0000-0000-0000-000000000000"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: get user using string instead of number
    request: 
      url: "{host}/v1/users/badid"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: get user
    request: 
      url: "{host}/v1/users/{user_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        id: "{user_id}"
        name: "{test_username}"
        is_admin: false

  - name: get user by non existent username
    request: 
      url: "{host}/v1/users"
      method: GET
      params:
        name: "{test_username}abc"
    response:
      headers:
        content-type: application/json
      status_code: 200
      json: []

  - name: get user by username
    request: 
      url: "{host}/v1/users"
      method: GET
      params:
        name: "{test_username}"
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        - id: "{user_id}"
          name: "{test_username}"
          is_admin: false

  - name: get all users
    request: 
      url: "{host}/v1/users"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        - id: "{user_id}"
          name: "{test_username}"
          is_admin: false

  - name: update non existent user
    request: 
      url: "{host}/v1/users/00000000-0000-0000-0000-000000000000"
      method: PUT
      json:
        name: "{test_username}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: update user with existing username
    request: 
      url: "{host}/v1/users/{user_id}"
      method: PUT
      json:
        name: "{test_username_2}"
        is_admin: false
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update user
    request: 
      url: "{host}/v1/users/{user_id}"
      method: PUT
      json:
        name: "{test_username}"
        is_admin: true
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: get user should show updated values
    request: 
      url: "{host}/v1/users/{user_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        id: "{user_id}"
        name: "{test_username}"
        is_admin: true

  ### /v1/languages

  - name: create new langauge
    request: 
      url: "{host}/v1/languages"
      method: POST
      json:
        name: "{test_language}"
        extension: ".gooby"
        version: "30000"
    response:
      headers:
        content-type: application/json
      status_code: 201
      json:
        name: "{test_language}"
        extension: ".gooby"
        version: "30000"
      save:
        json:
          language_id: id

  - name: create duplicate langauge
    request: 
      url: "{host}/v1/languages"
      method: POST
      json:
        name: "{test_language}"
        extension: ".gooby"
        version: "30000"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: get langauges
    request: 
      url: "{host}/v1/languages"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        - name: "{test_language}"
          extension: ".gooby"
          version: "30000"

  ### /v1/categories
  - name: get categories
    request:
      url: "{host}/v1/categories"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      save:
        json:
          category_id: "[0].id"
          category_id_2: "[1].id"

  ## /v1/problems

  - name: create problem with bad category id
    request: 
      url: "{host}/v1/problems"
      method: POST
      json:
        user_id: "{user_id}"
        prompt: "solve the problem"
        title: "{test_problem}"
        difficulty: "EASY"
        category_ids: ["{category_id}", "{category_id_2}", "00000000-0000-0000-0000-000000000000"]
        test_cases:
          - input: "abc"
            output: "123"
          - input: "xyz"
            output: "789"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create problem with bad user id
    request: 
      url: "{host}/v1/problems"
      method: POST
      json:
        user_id: 00000000-0000-0000-0000-000000000000
        prompt: "solve the problem"
        title: "{test_problem}"
        difficulty: "EASY"
        test_cases:
          - input: "abc"
            output: "123"
          - input: "xyz"
            output: "789"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create problem
    request: 
      url: "{host}/v1/problems"
      method: POST
      json:
        user_id: "{user_id}"
        prompt: "solve the problem"
        title: "{test_problem}"
        difficulty: "EASY"
        category_ids: ["{category_id}", "{category_id_2}"]
        test_cases:
          - input: "abc"
            expected_output: "123"
          - input: "xyz"
            expected_output: "789"
    response:
      headers:
        content-type: application/json
      status_code: 201
      json:
        user_id: "{user_id}"
        prompt: "solve the problem"
        title: "{test_problem}"
        test_cases:
          - input: "abc"
            expected_output: "123"
          - input: "xyz"
            expected_output: "789"
      save:
        json:
          problem_id: id
          test_case_id: test_cases[0].id

  - name: create duplicate problem
    request: 
      url: "{host}/v1/problems"
      method: POST
      json:
        user_id: "{user_id}"
        difficulty: "EASY"
        prompt: "solve the problem"
        title: "{test_problem}"
        test_cases:
          - input: "abc"
            is_public: !bool true
            expected_output: "123"
          - input: "xyz"
            is_public: !bool false
            expected_output: "789"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create second problem
    request: 
      url: "{host}/v1/problems"
      method: POST
      json:
        user_id: "{user_id}"
        prompt: "solve the harder problem"
        difficulty: "HARD"
        title: "{test_problem_2}"
        category_ids: ["{category_id}"]
        test_cases:
          - input: "you"
            is_public: !bool false
            expected_output: "me"
          - input: "me"
            is_public: !bool true
            expected_output: "you"
    response:
      headers:
        content-type: application/json
      status_code: 201
      json:
      save:
        json:
          problem_id_2: id
          test_case_id_2: test_cases[0].id

  - name: get non existent problem
    request: 
      url: "{host}/v1/problems/00000000-0000-0000-0000-000000000000"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: get problem
    request: 
      url: "{host}/v1/problems/{problem_id}"
      method: GET
      params:
        type: "private"
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        user_id: "{user_id}"
        prompt: "solve the problem"
        title: "{test_problem}"
        test_cases:
          - input: "abc"
            expected_output: "123"
        categories:
          - id: "{category_id}"
          - id: "{category_id_2}"

  - name: get all problems
    request: 
      url: "{host}/v1/problems"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        - user_id: "{user_id}"
          prompt: "solve the problem"
          title: "{test_problem}"

  ### /v1/submissions

  - name: create submission to non existent problem
    request: 
      url: "{host}/v1/submissions"
      method: POST
      json:
        user_id: "{user_id}"
        problem_id: 00000000-0000-0000-0000-000000000000
        time_elapsed: 1
        language_id: "{language_id}"
        source_code: "int main"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create submission to non existent user
    request: 
      url: "{host}/v1/submissions"
      method: POST
      json:
        user_id: 00000000-0000-0000-0000-000000000000
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: "{language_id}"
        source_code: "int main"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create submission to non existent language
    request: 
      url: "{host}/v1/submissions"
      method: POST
      json:
        user_id: "{user_id}"
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: 00000000-0000-0000-0000-000000000000
        source_code: "int main"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create submission
    request: 
      url: "{host}/v1/submissions"
      method: POST
      json:
        user_id: "{user_id}"
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: "{language_id}"
        source_code: "int main"
    response:
      headers:
        content-type: application/json
      status_code: 201
      json:
        user_id: "{user_id}"
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: "{language_id}"
        status: "PENDING"
        source_code: "int main"
      save:
        json:
          submission_id: id

  - name: get submission
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      json:
        id: "{submission_id}"
        user_id: "{user_id}"
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: "{language_id}"
        status: "PENDING"
        source_code: "int main"
      status_code: 200

  - name: update submission with bad status
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "LOOOL"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission with failed test case and not a failed status
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "ACCEPTED"
        failed_test_case_id: "{test_case_id}"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission with no failed test case and a failed status
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "MEMORY_LIMIT_EXCEEDED"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission back to pending
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "PENDING"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission with test case of other problem
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "WRONG_ANSWER"
        failed_test_case_id: "{test_case_id_2}"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission with non existant test case
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "WRONG_ANSWER"
        failed_test_case_id: 00000000-0000-0000-0000-000000000000
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: update submission
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: PATCH
      json:
        status: "WRONG_ANSWER"
        failed_test_case_id: "{test_case_id}"
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: get submission should show updated fields
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      json:
        id: "{submission_id}"
        user_id: "{user_id}"
        problem_id: "{problem_id}"
        time_elapsed: 1
        language_id: "{language_id}"
        status: "WRONG_ANSWER"
        failed_test_case_id: "{test_case_id}"
        source_code: "int main"
      status_code: 200

  - name: get submissions for non existent user
    request: 
      url: "{host}/v1/user_submissions/00000000-0000-0000-0000-000000000000"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: get submissions for existent user
    request: 
      url: "{host}/v1/user_submissions/{user_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      json:
        - id: "{submission_id}"
          user_id: "{user_id}"
          problem_id: "{problem_id}"
          time_elapsed: 1
          language_id: "{language_id}"
          status: "WRONG_ANSWER"
          failed_test_case_id: "{test_case_id}"
          source_code: "int main"
      status_code: 200
  ### /v1/competitions
  
  - name: create competition with non existent host
    request: 
      url: "{host}/v1/competitions"
      method: POST
      json:
        title: "test competition"
        description: "this is a test competition"
        user_id: 00000000-0000-0000-0000-000000000000
        start_time: "{five_minutes_from_now}"
        end_time: "{ten_minutes_from_now}"
        problem_ids:
          - "{problem_id}"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create competition start time before now
    request: 
      url: "{host}/v1/competitions"
      method: POST
      json:
        title: "test competition"
        description: "this is a test competition"
        user_id: "{user_id}"
        start_time: "{five_minutes_ago}"
        end_time: "{ten_minutes_from_now}"
        problem_ids:
          - "{problem_id}"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create competition start time after end time
    request:
      url: "{host}/v1/competitions"
      method: POST
      json:
        title: "test competition"
        description: "this is a test competition"
        user_id: "{user_id}"
        start_time: "{ten_minutes_from_now}"
        end_time: "{five_minutes_from_now}"
        problem_ids:
          - "{problem_id}"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create competition with no title
    request:
      url: "{host}/v1/competitions"
      method: POST
      json:
        description: "this is a test competition"
        user_id: "{user_id}"
        start_time: "{ten_minutes_from_now}"
        end_time: "{five_minutes_from_now}"
        problem_ids:
          - "{problem_id}"
    response:
      headers:
        content-type: application/json
      status_code: 400

  - name: create competition with bad problem id
    request:
      url: "{host}/v1/competitions"
      method: POST
      json:
        title: "test competition"
        description: "this is a test competition"
        user_id: "{user_id}"
        start_time: "{five_minutes_from_now}"
        end_time: "{ten_minutes_from_now}"
        problem_ids:
          - 00000000-0000-0000-0000-000000000000
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: create competition
    request:
      url: "{host}/v1/competitions"
      method: POST
      json:
        title: "test competition"
        description: "this is a test competition"
        user_id: "{user_id}"
        start_time: "{five_minutes_from_now}"
        end_time: "{ten_minutes_from_now}"
        problem_ids:
          - "{problem_id}"
          - "{problem_id_2}"
    response:
      headers:
        content-type: application/json
      status_code: 201
      save:
        json:
          competition_id: id

  - name: add user to non existent competition
    request:
      url: "{host}/v1/competitions/00000000-0000-0000-0000-000000000000/participants"
      method: POST
      json:
        user_id: "{user_id_2}"
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: add non existent user to competition
    request:
      url: "{host}/v1/competitions/{competition_id}/participants"
      method: POST
      json:
        user_id: 00000000-0000-0000-0000-000000000000
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: add user to competition
    request:
      url: "{host}/v1/competitions/{competition_id}/participants"
      method: POST
      json:
        user_id: "{user_id_2}"
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: get non existent competition
    request:
      url: "{host}/v1/competitions/00000000-0000-0000-0000-000000000000"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: get competition
    request:
      url: "{host}/v1/competitions/{competition_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        id: "{competition_id}"
        title: "test competition"
        description: "this is a test competition"
        start_time: "{five_minutes_from_now}"
        end_time: "{ten_minutes_from_now}"
        participants:
          - id: "{user_id_2}"
        problems:
          - id: "{problem_id}"
          - id: "{problem_id_2}"

  - name: get all competitions
    request:
      url: "{host}/v1/competitions"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 200
      json:
        - id: "{competition_id}"
          title: "test competition"
          description: "this is a test competition"
          start_time: "{five_minutes_from_now}"
          end_time: "{ten_minutes_from_now}"

  ### cleanup

  - name: delete non existent competition
    request: 
      url: "{host}/v1/competitions/00000000-0000-0000-0000-000000000000"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete competition
    request: 
      url: "{host}/v1/competitions/{competition_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: try to delete competition again
    request: 
      url: "{host}/v1/competitions/{competition_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete non existent problem
    request: 
      url: "{host}/v1/problems/00000000-0000-0000-0000-000000000000"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete problem
    request: 
      url: "{host}/v1/problems/{problem_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204
  
  - name: delete other problem
    request: 
      url: "{host}/v1/problems/{problem_id_2}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: getting submission should fail due to cascading delete
    request: 
      url: "{host}/v1/submissions/{submission_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: try to delete problem again
    request: 
      url: "{host}/v1/problems/{problem_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: getting problem should fail
    request: 
      url: "{host}/v1/problems/{problem_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete non existent language
    request: 
      url: "{host}/v1/languages/00000000-0000-0000-0000-000000000000"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete language
    request: 
      url: "{host}/v1/languages/{language_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204

  - name: delete language again should fail
    request: 
      url: "{host}/v1/languages/{language_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete non existent user
    request: 
      url: "{host}/v1/users/00000000-0000-0000-0000-000000000000"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete user
    request: 
      url: "{host}/v1/users/{user_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204
  
  - name: delete user again should fail
    request: 
      url: "{host}/v1/users/{user_id}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: get user again should fail
    request: 
      url: "{host}/v1/users/{user_id}"
      method: GET
    response:
      headers:
        content-type: application/json
      status_code: 404

  - name: delete other user
    request: 
      url: "{host}/v1/users/{user_id_2}"
      method: DELETE
    response:
      headers:
        content-type: application/json
      status_code: 204