#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
import argparse
import os
import requests
import pathlib
import os
import sys
import time
from typing import TypedDict
from dataclasses import dataclass
import yaml
import json
from pathlib import Path
import tempfile
import configparser
import subprocess
from jsonschema import validate, ValidationError

try:
    import argcomplete
    argcomplete_available = True
except:
    argcomplete_available = False


CONFIG_FILE_NAME = ".nextjudge.config"
CONFIG_FILE_PATH = Path.home() / CONFIG_FILE_NAME

BASE_DIRECTORY = Path(os.path.dirname(os.path.abspath(__file__))).parent.absolute()

NEXTJUDGE_PORT = 5000

def add_common_arguments(parser: argparse.ArgumentParser,default_port):
    host = os.getenv("HOST") or "localhost"
    port = os.getenv("PORT") or default_port

    parser.add_argument("--host", type=str, dest="host", default=host, required=False, help="The host to connect to")
    parser.add_argument("--port", type=int, dest="port", default=port, required=False, help="The port to connect to")


def main():
    parser = argparse.ArgumentParser(
        description="Command line interface for NextJudge"
    )

    # Read config file if it exists

    # config = configparser.ConfigParser()
    # config.read(CONFIG_FILE_PATH)

    add_common_arguments(parser, NEXTJUDGE_PORT)

    toplevel_parser = parser.add_subparsers(dest="command", help="Sub-commands")

    # Upload
    upload_challenge_parser = toplevel_parser.add_parser("upload-challenge")
    upload_challenge_parser.add_argument('directory_to_problem')

    # Auth
    auth_parser = toplevel_parser.add_parser("auth")

    # Submit
    submit_parser = toplevel_parser.add_parser("submit")
    submit_parser.add_argument("file_path")
    submit_parser.add_argument("--id", dest="id", required=False, default=None, type=int)

    # Get
    get_parser = toplevel_parser.add_parser("get")
    get_parser.add_argument("id",type=int)

    # Upload suite
    suite_parser = toplevel_parser.add_parser("upload-challenge-suite")
    suite_parser.add_argument("directory")

    # Run accepted tests
    upload_icpc_test = toplevel_parser.add_parser("test-icpc-solutions")
    upload_icpc_test.add_argument("directory")
    upload_icpc_test.add_argument("--choose", dest="choose", default=None, required=False)

    # Run accepted tests
    upload_icpc_test_suite = toplevel_parser.add_parser("test-icpc-solutions-suite")
    upload_icpc_test_suite.add_argument("directory")
    upload_icpc_test_suite.add_argument("--skip", dest="skip", default="")


    # Custom run
    custom_parser = toplevel_parser.add_parser("custom-run")
    custom_parser.add_argument("solution_file_path")
    custom_parser.add_argument("stdin")


    # Test
    test_parser = toplevel_parser.add_parser("test")
    test_parser.add_argument("file")
    test_parser.add_argument("--tests", dest="tests", default=None, required=False)
    test_parser.add_argument("--local-image", dest="local_image", action="store_const",const=True,default=False, required=False)

    # run-with-input
    test_parser = toplevel_parser.add_parser("run-with-input")
    test_parser.add_argument("file")
    test_parser.add_argument("stdin")
    test_parser.add_argument("--local-image", dest="local_image", action="store_const",const=True,default=False, required=False)

    # event
    event_parser = toplevel_parser.add_parser("event")
    event_level_parser = event_parser.add_subparsers(dest="event_subcommand",required=True)

    # event create
    create_event = event_level_parser.add_parser("create")

    # event join
    # create_event = event_level_parser.add_parser("join")

    # event get
    create_event = event_level_parser.add_parser("get")
    create_event.add_argument("id",nargs="?")

    # event pull
    pull_event = event_level_parser.add_parser("pull")
    pull_event.add_argument("id",nargs="?")

    argcomplete.autocomplete(parser)

    # Parse arguments
    args = parser.parse_args()

    # Handle sub-commands
    if args.command == "auth":
        pass
    elif args.command == "event":
        subcommand = args.event_subcommand
        print(subcommand)

        if subcommand == "create":
            event_create(args.host, args.port)
        elif subcommand == "get":
            event_get(args.host, args.port, args.id)
        elif subcommand == "pull":
            event_pull(args.host, args.port, args.id)
        # event_handle(args.host, args.port)
    elif args.command == "submit":
        send_solution(args.file_path, args.id, args.host, args.port)
    elif args.command == "get":
        args.port = "5000"
        get_problem_data(args.id, args.host, args.port)
    elif args.command == "upload-challenge":
        args.port = "5000"
        parse_and_send_general_folder(args.directory_to_problem, args.host, args.port)
    elif args.command == "upload-challenge-suite":
        args.port = "5000"

        directories = [d.name for d in Path(args.directory).iterdir() if d.is_dir()]

        success = 0
        for directory in directories:
            s = parse_and_send_general_folder(f"{args.directory}/{directory}",args.host,args.port)
            if s:
                success += 1
        
        print(f"Successfully uploaded {success} out of {len(directories)} problems")

    elif args.command == "custom-run":
        BRIDGE_HOST=args.host
        BRIDGE_PORT=args.port
        BRIDGE_ENDPOINT = f"http://{BRIDGE_HOST}:{BRIDGE_PORT}"

        sol_path: str = args.solution_file_path

        source_code = get_solution(sol_path)

        if source_code is None:
            sys.exit(1)

        language_id = get_language_id_from_extension(BRIDGE_ENDPOINT,sol_path)

        if language_id is None:
            print("Could not map the file to a language (based on extension)")
            sys.exit(1)

        submit = requests.post(
            f"http://{BRIDGE_HOST}:{BRIDGE_PORT}/v1/input_submissions",
            json = {
                "user_id": get_test_user_id(f"http://{BRIDGE_HOST}:5000"),
                "source_code": source_code,
                "language_id": language_id,
                "stdin": args.stdin
            }
        )

        if not submit.ok:
            print(submit.text)
            sys.exit(1)

        print(f"Submission ID: {submit.text}")

        max_polls = 12
        initial_delay = 0.3
        max_delay = 1.5
        increment = (max_delay - initial_delay) / (max_polls - 1)

        delay = initial_delay

        for i in range(25):
            time.sleep(delay)

            verdict = requests.get(
                f"http://{BRIDGE_HOST}:{BRIDGE_PORT}/v1/input_submissions/{submit.text}",
            )
            
            print(verdict.text)
            result = verdict.json()

            status = result["status"]
            if status != "PENDING" and status != "":
                print(f"Result: {result['status']}")
                print(f"stdout: {result['stdout']}")
                print(f"stderr: {result['stderr']}")
                break

            delay = min(delay+increment,max_delay)

    elif args.command == "test-icpc-solutions":
        args.port = "5000"
        upload_and_run_icpc_solutions(args.directory, args.host, args.port, choose=args.choose)
    elif args.command == "test-icpc-solutions-suite":
        args.port = "5000"
        upload_and_run_icpc_solutions_suite(args.directory, args.host, args.port, args.skip)
    elif args.command == "test":
        run_local_tests(args.file, args.tests, args.local_image)
    elif args.command == "run-with-input":
        local_run_custom(args.file, args.stdin, args.local_image)
    else:
        print("Unknown command")
        parser.print_help()





class Language(TypedDict):
    id: int
    name: str
    version: str
    extension: str


class User(TypedDict):
    id: str
    name: str
    email: str

# def get_test_user_id(endpoint: str) -> str | None:

#     try:
#         users = requests.get(f"{endpoint}/v1/users")
#         real_users: list[User] = users.json()
#         return real_users[0]['id']
#     except:
#         print("Getting test user ID")
#         print(f"Failed to connect to {endpoint}")
#         return None
    





def get_languages(endpoint: str) -> list[Language] | None:
    
    try:
        bridge_languages = requests.get(f"{endpoint}/v1/languages")
        real_langs = bridge_languages.json()
        return real_langs
    except:
        print("Getting languages")
        print(f"Failed to connect to {endpoint}")
        return None

def get_language_id_from_extension(endpoint: str, filepath: str) -> int | None:

    languages = get_languages(endpoint)

    if languages:

        for lang in languages:
            if filepath.endswith(lang["extension"]):
                return lang["id"]

    return None

def get_solution(filepath: str) -> str:
    try:
        source_code = open(filepath,"r", encoding="utf-8").read()
        return source_code
    except FileNotFoundError:
        print(f"Could not find file {filepath}")
        return None
    except OSError as e:
        print(f"Could not open file {filepath} - {e}")
        return None
 
def send_solution(sol_path: str, problem_id: int | None, host: str, port: int) -> dict:
    BRIDGE_ENDPOINT = f"http://{host}:{str(port)}"

    print(BRIDGE_ENDPOINT)

    if problem_id is None:
        config = configparser.ConfigParser()
        try:
            with open(".nextjudge.env") as f:
                config.read_file(f)
                problem_id = int(config["config"]["problem_id"])
        except IOError:
            print("No .nextjudge.env found. Specify an ID explicitly with --id")
            sys.exit(1)

    source_code = get_solution(sol_path)

    if source_code is None:
        sys.exit(1)

    language_id = get_language_id_from_extension(BRIDGE_ENDPOINT,sol_path)

    if language_id is None:
        print("Could not map the file to a language (based on extension)")
        return None

    test_data_data = get_test_user_auth(host, port)
    token = test_data_data["token"]
    id = test_data_data["id"]
    
    submit = requests.post(
        f"{BRIDGE_ENDPOINT}/v1/submissions",
        json = {
            "user_id": id,
            "problem_id": int(problem_id),
            "language_id": language_id,
            "source_code": source_code,
        },
        headers={
            "Authorization":token
        }
    )

    if not submit.ok:
        print(submit.status_code)
        print(f"Failed to send submission: {submit.text}")
        return None

    print(f"Response: {submit.text}")

    submission_id = submit.json()["id"]

    max_polls = 12
    initial_delay = 0.3
    max_delay = 3.5
    increment = (max_delay - initial_delay) / (max_polls - 1)

    delay = initial_delay

    for i in range(32):
        time.sleep(delay)

        verdict = requests.get(
            f"{BRIDGE_ENDPOINT}/v1/submissions/{submission_id}/status",
            headers={
                "Authorization":token
            }
        )

        result = verdict.json()
        print(result)
        status = result["status"]

        if status != "PENDING" and status != "":
            print(f"Verdict: {status}")
            return result

        delay = min(delay+increment,max_delay)

    return None



@dataclass
class SendResult:
    success: bool
    id: int



@dataclass
class ICPCProblemDefinition:
    title: str
    prompt: str
    source: str
    time_limit: float
    memory_limit: int
    tests: list[dict]

    # def to_json(self, id: str) -> dict:
    #     return{
    #         "title": self.title,
    #         "prompt": self.prompt,
    #         "timeout": 1,
    #         "difficulty": "MEDIUM",
    #         "user_id": id,
    #         "test_cases": self.tests,
    #         "public":True,
    #     }



def parse_icpc_folder(dir: str) -> ICPCProblemDefinition:
    with open(f"{dir}/problem.yaml", 'r') as file:
        problem_description = yaml.safe_load(file)

    title = problem_description["name"]
    source = problem_description["source"]

    try:
        statement = open(f"{dir}/problem_statement/problem.en.tex","r").read()
    except:
        print("Cannot find a problem.en.tex")
        sys.exit(1)

    # Load all testcases now
    test_cases = []

    # Private test cases
    testcase_files = os.listdir(f"{dir}/data/secret")
    testcase_names = [case[:-3] for case in testcase_files if case.endswith("in")]

    for name in testcase_names:
        test_input = open(f"{dir}/data/secret/{name}.in", 'r').read()
        test_output = open(f"{dir}/data/secret/{name}.ans", 'r').read()

        test_cases.append({
            "input": test_input,
            "expected_output": test_output,
            "hidden": True
        })

    # Public test cases
    try:
        testcase_files = os.listdir(f"{dir}/data/sample")
        testcase_names = [case[:-3] for case in testcase_files if case.endswith("in")]
        for name in testcase_names:
            test_input = open(f"{dir}/data/sample/{name}.in", 'r').read()
            test_output = open(f"{dir}/data/sample/{name}.ans", 'r').read()

            test_cases.append({
                "input": test_input,
                "expected_output": test_output,
                "hidden": False
            })
    except:
        pass


    return ICPCProblemDefinition(
        title=title,
        prompt=statement,
        source=source,
        time_limit=1,
        memory_limit=1,
        tests=test_cases,
    )


def parse_and_send_folder(dir: str, host: str, port: str) -> SendResult:
    problem_info = parse_icpc_folder(dir)
    return create_icpc_challenge(host, port, problem_info)

def parse_and_send_general_folder(dir: str, host: str, port: str) -> SendResult:
    # Creates the challenge as a generally available challenge - return the event_problem_id
    problem_info = parse_icpc_folder(dir)
    return create_icpc_challenge(host, port, problem_info, public=True)

# Return Problem Description ID of existing problem if a problem by the same name already exists
def create_icpc_challenge(host: str, port: str, problem_info: ICPCProblemDefinition, identifier: str = "", public=False) -> SendResult:

    print(f"Title: {problem_info.title}")
    print(f"Number of testcases: {len(problem_info.tests)}")

    test_auth_data = get_test_user_auth(host, port)
    token = test_auth_data["token"]
    id = test_auth_data["id"]
    
    try:
        print(token)
        submit_problem = requests.post(
            f"http://{host}:{port}/v1/problems",
            json = {
                "title": problem_info.title,
                "identifier": identifier,
                "prompt": problem_info.prompt,
                "timeout": 1,
                "difficulty": "MEDIUM",
                "user_id": id,
                "test_cases": problem_info.tests,
                "public":public,
            },
            headers={
                "Authorization":token
            }
        )
    except:
        print(f"Failed to connect to NextJudge")
        sys.exit(1)

    print(submit_problem.text)

    if submit_problem.ok:
        response_json = submit_problem.json()
        id = response_json['id']
        
        if public:
            # Return the event_problem id, not the id of the problem description
            id = response_json['event_problem_id']

        print("Successfully upload problem")
        print(f"Problem ID: {id}")
        return SendResult(True, id)
    elif submit_problem.status_code == 409:
        response_json = submit_problem.json()
        print("Problem already exists on the server!")
        id = response_json['id']
        return SendResult(True, id)

    return SendResult(False, -1)




class TestCase(TypedDict):
    id: int
    input: str
    expected_output: str

class ProblemCategory(TypedDict):
    id: int
    name: str

class Problem(TypedDict):
    id: int
    prompt: str
    title: str
    difficulty: str
    timeout: int
    user_id: int
    test_cases: list[TestCase]
    categories: list[ProblemCategory]


def get_problem_data(id: int, host: str, port: str):
    DATABASE_ENDPOINT = f"http://{host}:{port}"

    try:
        response = requests.get(
            f"{DATABASE_ENDPOINT}/v1/problems/{id}",
        )
    except requests.exceptions.RequestException as e:
        print(f"Failed to connect to endpoint - {DATABASE_ENDPOINT}")
        sys.exit(1)

    if not response.ok:
        print(f"Failed to get problem {id}")
        print(f"{response.text}")
        sys.exit(1)

    data: Problem = response.json()

    config = configparser.ConfigParser()
    config["config"] = {"problem_id":str(id)}


    result = f"""ID: {id}
Title: {data['title']}"""

    print(result)


    with open("prompt", "w") as f:
        f.write(data["prompt"])
        print(f"Problem statement saved to file: 'prompt'")

    with open(".nextjudge.env", "w") as f:
        config.write(f)

    pathlib.Path("testcases").mkdir(exist_ok=True)
    if "test_cases" in data:
        for i, testcase in enumerate(data["test_cases"]):
            
            testcase_name = i
            # testcase_name = testcase["id"]

            with open(f"testcases/{testcase_name}.in","w") as f:
                f.write(testcase["input"])

            with open(f"testcases/{testcase_name}.ans","w") as f:
                f.write(testcase["expected_output"])

    
        print(f"{len(data['test_cases'])} tests written into 'testcases' directory")


def upload_and_run_icpc_solutions(directory: str, host: str, port: str, choose=None):

    s = parse_and_send_general_folder(f"{directory}",host,port)
    
    files = [f for f in Path(f"{directory}/submissions/accepted").iterdir() if f.is_file()]

    for f in files:
        if choose is not None and choose not in str(f):
            print(f"Skipping {str(f)}")
            continue

        if str(f).endswith("java"):
            print("Skipping java submission")
            continue

        print(f"File extension: {f.suffix}")

        r = send_solution(str(f),s.id,"localhost",NEXTJUDGE_PORT)
        if r is not None:
            if r["status"] != "ACCEPTED":
                print("Failed:", (str(f)))


def upload_and_run_icpc_solutions_suite(top_level_directory: str, host: str, port: str, skip: str):

    directories = [d.name for d in Path(top_level_directory).iterdir() if d.is_dir()]
    # print(directories)

    tmp_file_name = tempfile.NamedTemporaryFile(delete=False)
    log_file = open(tmp_file_name.name,'wb')

    print("Name:", log_file.name)

    skipping = skip.split(" ") if skip else []

    for directory in directories:
        print(directory)

        b = False
        for s in skipping:
            if s in directory:
                print(f"Skipping {directory}")
                b = True
                break
        if b:
            continue

        s = parse_and_send_general_folder(f"{top_level_directory}/{directory}",host,port)
        
        if s.id == -1:
            print("Failure uploading challenge and it doesn't already exist")
            sys.exit(1)

        files = [f for f in Path(f"{top_level_directory}/{directory}/submissions/accepted").iterdir() if f.is_file()]

        for f in files:
            if not str(f).endswith("java"):
                print("Doing only java submission")
                continue

            print(f"File extension: {f.suffix}")

            r = send_solution(str(f),s.id,"localhost",NEXTJUDGE_PORT)
            if r is not None:
                if r["status"] != "ACCEPTED":
                    print("Failed:", (str(f)))
                    log_file.write(f"{s.id}:{str(f)}:{r['status']}\n".encode())
                    log_file.flush()

    print(log_file.name)

@dataclass
class EventProblemDefinition:
    value: ICPCProblemDefinition | int | str

@dataclass
class EventDefinition:
    title: str
    description: str
    start_time: str
    end_time: str
    teams: bool
    problems: list[EventProblemDefinition]

def parse_event_yaml_file(path: str) -> EventDefinition:
    
    DEFAULT_PREFIX_PROBLEM_IDENTIFIER = True
    
    with open("event.yaml") as f:
        event = yaml.safe_load(f)

    schema = open(os.path.join(f"{BASE_DIRECTORY}","../../.vscode/test.json")).read()
    schema_json = json.loads(schema)

    try:
        validate(instance=event,schema=schema_json)
        print("Valid")
    except ValidationError as e:
        print(e.message)
        print("ERROR")
        sys.exit(1)

    problems: list[EventProblemDefinition] = []
    
    # Get names of events to upload them
    for problem in event["problems"]:
        # print(problem)
        if "path" in problem:
            print(problem)
            # TODO: FIX THIS: the name should override - this is PER EVENT. DO NOT simply refer to an existing challenge with the same name
            icpc_problem = parse_icpc_folder(problem["path"])
            problems.append(
                EventProblemDefinition(
                    icpc_problem
                )
            )
        else:
            sys.exit("Other problem types not supported yet")
    
    return EventDefinition(
        title=event["title"],
        description=event["description"],
        start_time="2025-04-12T23:20:50.52Z",
        end_time="2026-04-12T23:20:50.54Z",
        teams=event["teams"],
        problems=problems
    )


def event_create(host, port) -> None:
    # Fails if the event name already exists
    test_data_data = get_test_user_auth(host, port)
    token = test_data_data["token"]
    id = test_data_data["id"]

    event = parse_event_yaml_file("event.yaml")
    # TODO: Upload the problems then link to them using the resulting event_id's

    problem_ids_ints: list[int] = []

    for problem_selection in event.problems:
        if type(problem_selection.value) == ICPCProblemDefinition:
            icpc_problem = problem_selection.value
            # TODO: FIX THIS: the name should override - this is PER EVENT. DO NOT simply refer to an existing challenge with the same name
            result = create_icpc_challenge(
                host,
                port,
                icpc_problem,identifier=f"{event.title}_{icpc_problem.title}",
                public=False
            )
            
            problem_ids_ints.append(result.id)
        else:
            sys.exit("Other problem types not supported yet")

    problems_as_json = list(map(lambda x: {"problem_id":x},problem_ids_ints))
    print(problems_as_json)

    create_event_request = requests.post(
        f"http://{host}:{port}/v1/events",
        json = {
            "title":event.title,
            "description":event.description,
            "start_time":event.start_time,
            "end_time":event.end_time,
            "teams":event.teams,
            "problems":problems_as_json
        },
        headers={
            "Authorization":token
        }
    )

    print(create_event_request.content)


# # Update an event
# def event_push(host, port) -> None:
#     test_data_data = get_test_user_auth(host, port)
#     token = test_data_data["token"]
#     id = test_data_data["id"]

#     event = parse_event_yaml_file("event.yaml")

#     local_problem_identifiers = []
    
#     # Get names of events to upload them
#     for problem_selection in event.problems:
#         if type(problem_selection.value) == ICPCProblemDefinition:
#             problem = problem_selection.value
#             print(problem)
#             local_problem_identifiers.append(problem.title)
#         else:
#             sys.exit("Other problem types not supported yet")
#     # Check if each problem already exists

#     print("Local problem identifiers")
#     print(local_problem_identifiers)

#     removeEvent = event_get_by_title(host, port, event.title)

#     if True:
#         # If the event already exists
#         print("Event exists")

#         remote_problem_identifiers = list(map(lambda x: x["problem"]["title"],removeEvent["problems"]))
        
#         print("Remote problem identifiers")
#         print(remote_problem_identifiers)

#     # These problems get straight uploaded
#     new_problems = set(local_problem_identifiers) - set(remote_problem_identifiers)
#     print("New problems")
#     print(new_problems)

#     # TODO: upload these events and get their ID's
    
#     # Override existing problem by their ID
#     problem_overlap = set(local_problem_identifiers) & set(remote_problem_identifiers)
#     print("Existing problems")
#     print(problem_overlap)

#     sys.exit(1)

#     create_event_request = requests.post(
#         f"http://{host}:{port}/v1/events",
#         json = {
#             "title":event.title,
#             "description":event["description"],
#             "start_time":,
#             "end_time":,
#             "teams":,
#             "problems": []
#         },
#         headers={
#             "Authorization":token
#         }
#     )

#     print(create_event_request.content)

def event_get(host, port, id: int | None) -> None:
    if id is not None:
        event_get_by_id(host, port, id)
    else:
        test_data_data = get_test_user_auth(host, port)
        token = test_data_data["token"]
        id = test_data_data["id"]

        get_all_event_data = requests.get(
            f"http://{host}:{port}/v1/events",
            headers={
                "Authorization":token
            }
        )

        print(get_all_event_data.content)
        return get_all_event_data.json()

# Pull all challenges from an event into the local directory
def event_pull(host, port, id: int | None) -> None:
    if id is not None:
        event_get_by_id(host, port, id)
    else:
        test_data_data = get_test_user_auth(host, port)
        token = test_data_data["token"]
        id = test_data_data["id"]

        get_all_event_data = requests.get(
            f"http://{host}:{port}/v1/events",
            headers={
                "Authorization":token
            }
        )

        print(get_all_event_data.content)
        return get_all_event_data.json()



def event_get_by_id(host, port, event_id:int) -> dict:
    test_data_data = get_test_user_auth(host, port)
    token = test_data_data["token"]

    get_test_event_data = requests.get(
        f"http://{host}:{port}/v1/events/{event_id}",
        headers={
            "Authorization":token
        }
    )

    print(get_test_event_data.content)

    return get_test_event_data.json()

def event_get_by_title(host, port, title:str) -> dict:
    test_data_data = get_test_user_auth(host, port)
    token = test_data_data["token"]
    id = test_data_data["id"]

    get_test_event_data = requests.get(
        f"http://{host}:{port}/v1/event_details?title={title}",
        headers={
            "Authorization":token
        }
    )

    return get_test_event_data.json()


def event_handle(host, port) -> None:
    event_id = 1
    submit_problem = requests.post(
        f"http://{host}:{port}/v1/events/{event_id}/problems",
        json = {
            "problem_id": 1,
        },
    )

    print(submit_problem.content)

def get_test_user_auth(host, port) -> dict:
    get_data = requests.post(
        f"http://{host}:{port}/v1/auth_test/user_creds",
    )
    return get_data.json()

def run_local_tests(file: str, tests_dir: str | None, local_image: bool) -> None:
    
    if tests_dir is None:
        if os.path.isdir("testcases"):
            tests_dir = "testcases"
        else:
            print("You must specify the path to the testcase folder - not found automatically")
            sys.exit(1)


    IMAGE_NAME="ghcr.io/nextjudge/judge:latest" if not local_image else "nextjudge/judge"


    # Works with absolute paths and 
    path = Path(file).resolve()

    # We retain the file extension this way
    filename = path.name


    result = subprocess.run(
        [
            "docker",
            "run",
            "--privileged",
            "--mount",
            f"type=bind,src={path},target=/{filename},readonly",
            "-v",
            f"./{tests_dir}:/tests/:ro",
            IMAGE_NAME,
            "--file",
            f"/{filename}",
            "--tests",
            "/tests/"
        ]
    )

def local_run_custom(file: str, stdin: str, local_image: bool) -> None:
    """
    Take a file and STDIN, and run the program
    """

    IMAGE_NAME="ghcr.io/nextjudge/judge:latest" if not local_image else "nextjudge/judge"

    IMAGE_NAME = "nextjudge/judge"

    # Works with absolute paths and 
    path = Path(file).resolve()

    # We retain the file extension this way
    filename = path.name

    result = subprocess.run(
        [
            "docker",
            "run",
            "--privileged",
            "--mount",
            f"type=bind,src={path},target=/{filename},readonly",
            IMAGE_NAME,
            "--file",
            f"/{filename}",
            "--stdin",
            stdin
        ]
    )

    

if __name__ == "__main__":
    main()
