generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model competition_problem {
  competition_id Int
  problem_id     Int

  @@id([competition_id, problem_id])
}

model competition_user {
  user_id        Int
  competition_id Int

  @@id([user_id, competition_id])
}

model competitions {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  start_time  DateTime? @db.Timestamp(6)
  end_time    DateTime? @db.Timestamp(6)
  description String?   @db.VarChar
  title       String?   @db.VarChar
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model languages {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar
  extension   String?       @db.VarChar
  version     String?       @db.VarChar
  submissions submissions[]
}

model problems {
  id          Int           @id @default(autoincrement())
  title       String?       @db.VarChar
  prompt      String?       @db.VarChar
  timeout     Int?
  user_id     Int?
  upload_date DateTime?     @db.Timestamp(6)
  users       users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  submissions submissions[]
  test_cases  test_cases[]
}

model submissions {
  id                  Int         @id @default(autoincrement())
  user_id             Int?
  problem_id          Int?
  time_elapsed        Int?
  language_id         Int?
  status              status?
  failed_test_case_id Int?
  submit_time         DateTime?   @db.Timestamp(6)
  source_code         String?     @db.VarChar
  test_cases          test_cases? @relation(fields: [failed_test_case_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  languages           languages?  @relation(fields: [language_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  problems            problems?   @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model test_cases {
  id              Int           @id @default(autoincrement())
  problem_id      Int?
  input           String?       @db.VarChar
  expected_output String?       @db.VarChar
  submissions     submissions[]
  problems        problems?     @relation(fields: [problem_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id            Int            @id @default(autoincrement())
  username      String?        @db.VarChar
  password_hash String?        @db.VarChar
  join_date     DateTime?      @db.Timestamp(6)
  is_admin      Boolean?
  competitions  competitions[]
  problems      problems[]
  submissions   submissions[]
}

enum status {
  ACCEPTED
  WRONG_ANSWER
  TIME_LIMIT_EXCEEDED
  MEMORY_LIMIT_EXCEEDED
  RUNTIME_ERROR
  COMPILE_TIME_ERROR
  PENDING
}
