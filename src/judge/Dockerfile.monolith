# prod or dev
ARG USAGE

FROM ubuntu:24.04 as BUILD

RUN apt-get update -y && apt-get install -y curl tar wget g++ gcc python3 ruby build-essential openjdk-21-jdk

RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
RUN wget https://go.dev/dl/go1.22.1.linux-amd64.tar.gz && tar -C /usr/local -xzf go1.22.1.linux-amd64.tar.gz
# Make go compile the stdlib now, and not on the first use of the go build command
RUN /usr/local/go/bin/go install std


# Node
ENV NODE_VERSION=21.6.2
RUN wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
ENV NVM_DIR=/root/.nvm
RUN \. "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION} && nvm use ${NODE_VERSION} && nvm alias default ${NODE_VERSION}

# TypeScript
RUN \. "$NVM_DIR/nvm.sh" && npm install typescript -g

# Lua
RUN <<EOF
curl -L -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz
tar zxf lua-5.4.6.tar.gz
cd lua-5.4.6
make linux install INSTALL_TOP=/usr/local/lua/5_4_6
EOF

# Kotlin
RUN <<EOF
wget https://github.com/JetBrains/kotlin/releases/download/v1.9.24/kotlin-compiler-1.9.24.zip
unzip kotlin-compiler-1.9.24.zip
EOF

RUN apt-get install -y strace

RUN apt-get install -y ghc

RUN curl -L https://dot.net/v1/dotnet-install.sh | bash -s -- --version latest

FROM basejudge:"$USAGE"

COPY --from=BUILD / /chroot
# RUN mkdir -p /chroot/root/.cache
RUN chown -R 99999:99999 /chroot/root
RUN chown -R 99999:99999 /chroot/usr
RUN chown -R 99999:99999 /chroot/dev




COPY <<-'EOF' /app/languages.toml
[[language]]
name = "c++"
version = "14"
extension = "cpp"
script= """
#!/bin/sh
g++ {IN_FILE} -O2 -o /executable/main 
"""

[[language]]
name = "c"
version = "0"
extension = "c"
script= """
#!/bin/sh
gcc {IN_FILE} -O2 -o /executable/main 
"""

[[language]]
name = "python"
version = "3.12"
extension = "py"
script="""
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "python3 /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "rust"
version = "1.71.0"
extension = "rs"
script="""
#!/bin/sh
/root/.cargo/bin/rustc {IN_FILE} -o /executable/main
"""

[[language]]
name = "go"
version = "0"
extension = "go"
script= """
#!/bin/sh
/usr/local/go/bin/go build -o /executable/main {IN_FILE}
"""


[[language]]
name = "javascript"
version = "0"
extension = "js"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo 'export PATH="/root/.nvm/versions/node/v21.6.2/bin/:$PATH"' >> /executable/main
echo "node /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "typescript"
version = "0"
extension = "ts"
script= """
#!/bin/sh
export PATH="/root/.nvm/versions/node/v21.6.2/bin/:$PATH"
export NODE_OPTIONS="--max_old_space_size=2048"
export GENERATE_SOURCEMAP=false
tsc {IN_FILE} --outfile main2

echo "#!/bin/sh" >> /executable/main
echo 'export PATH="/root/.nvm/versions/node/v21.6.2/bin/:$PATH"' >> /executable/main
echo "node /build/main2" >> /executable/main
chmod +x /executable/main
"""


[[language]]
name = "ruby"
version = "0"
extension = "rb"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "/usr/bin/ruby /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""


[[language]]
name = "lua"
version = "5.4.6"
extension = "lua"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "/usr/local/lua/5_4_6/bin/lua /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "java"
version = "21"
extension = "java"
script= """
#!/bin/bash

ERROR_MSG=$(/usr/bin/javac -d /executable "{IN_FILE}" 2>&1)

CLASS_FILE=$(ls /executable)

if [ -z "$CLASS_FILE" ]; then

    ERROR_CLASS_NAME=$(echo "$ERROR_MSG" | grep -oP 'class \\K\\w+(?= is public, should be declared in a file named \\w+\\.java)')

    if [ -z "$ERROR_CLASS_NAME" ]; then
        echo "No class name found in error message or no public class in file: {IN_FILE}" >&2
        echo "Error message: $ERROR_MSG" >&2
        exit 1
    fi

    mv "{IN_FILE}" "$ERROR_CLASS_NAME.java"

    /usr/bin/javac -d /executable "$ERROR_CLASS_NAME.java"

    CLASS_FILE="$ERROR_CLASS_NAME"
else
    CLASS_FILE=$(basename "$CLASS_FILE" .class)
fi


echo "#!/bin/sh" >> /executable/main
echo "/usr/bin/java -XX:+UseSerialGC $CLASS_FILE" >> /executable/main
chmod +x /executable/main

cat /executable/main
"""


[[language]]
name = "kotlin"
version = "1.9.24"
extension = "kt"
script= """
#!/bin/sh

/kotlinc/bin/kotlinc -d /executable {IN_FILE}

echo "#!/bin/sh" >> /executable/main
echo "/kotlinc/bin/kotlin /executable/InputKt.class" >> /executable/main
chmod +x /executable/main

ls /executable
ls /build

"""



[[language]]
name = "haskell"
version = "9.4.7"
extension = "hs"
script= """
#!/bin/sh
/usr/bin/ghc {IN_FILE} -o /executable/main
"""


EOF


