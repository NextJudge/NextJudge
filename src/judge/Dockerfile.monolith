# prod or dev
ARG BASEJUDGE

FROM ubuntu:24.04 AS build

RUN apt-get update -y && apt-get install -y curl tar wget g++ gcc python3 ruby build-essential openjdk-21-jdk strace ghc pypy3

# User level stuff below
# Make dummy user so files have the correct UID/GID
RUN groupadd -g 99999 NEXTJUDGE_USER_GROUP
RUN useradd NEXTJUDGE_USER -u 99999 -g 99999 -s /bin/bash

USER NEXTJUDGE_USER
WORKDIR /home/NEXTJUDGE_USER

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --profile minimal -y
# Install Golang
RUN wget https://go.dev/dl/go1.22.1.linux-amd64.tar.gz && tar -C /home/NEXTJUDGE_USER -xzf go1.22.1.linux-amd64.tar.gz
# Make go compile the stdlib now, and not on the first use of the go build command
RUN GOROOT=/home/NEXTJUDGE_USER/go GODEBUG=installgoroot=all /home/NEXTJUDGE_USER/go/bin/go install std



# Node
ENV NODE_VERSION=21.6.2
RUN wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
ENV NVM_DIR=/home/NEXTJUDGE_USER/.nvm
RUN \. "$NVM_DIR/nvm.sh" && nvm install ${NODE_VERSION} && nvm use ${NODE_VERSION} && nvm alias default ${NODE_VERSION}

# TypeScript
RUN \. "$NVM_DIR/nvm.sh" && npm install typescript -g

# Lua
RUN curl -L -R -O https://www.lua.org/ftp/lua-5.4.6.tar.gz && \
    tar zxf lua-5.4.6.tar.gz && \
    cd lua-5.4.6 && \
    make linux install INSTALL_TOP=/home/NEXTJUDGE_USER/lua/5_4_6

# # Kotlin
RUN wget https://github.com/JetBrains/kotlin/releases/download/v1.9.24/kotlin-compiler-1.9.24.zip && \
    unzip kotlin-compiler-1.9.24.zip


# RUN curl -L https://dot.net/v1/dotnet-install.sh | bash -s -- --version latest

FROM "$BASEJUDGE"

COPY --from=build / /chroot
RUN chown -R 99999:99999 /chroot/dev


COPY <<-'EOF' /app/languages.toml
[[language]]
name = "c++"
version = "13.2.0"
extension = "cpp"
script= """
#!/bin/sh
g++ {IN_FILE} -O2 -o /executable/main 
"""

[[language]]
name = "c"
version = "13.2.0"
extension = "c"
script= """
#!/bin/sh
gcc {IN_FILE} -O2 -o /executable/main 
"""

[[language]]
name = "pypy"
version = "3.9.18 (7.3.15)"
extension = "py"
script="""
#!/bin/sh
/usr/bin/pypy3 -m py_compile {IN_FILE}

echo "#!/bin/sh" >> /executable/main
echo "/usr/bin/pypy3 /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "python"
version = "3.12"
extension = "py"
script="""
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "python3 /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "rust"
version = "1.78.0"
extension = "rs"
script="""
#!/bin/sh
HOME=/home/NEXTJUDGE_USER /home/NEXTJUDGE_USER/.cargo/bin/rustc {IN_FILE} -o /executable/main
"""

[[language]]
name = "go"
version = "1.22.1"
extension = "go"
script= """
#!/bin/sh
mkdir -p /tmp/.cache/go-cache
GOCACHE=/tmp/.cache/go-cache GOROOT=/home/NEXTJUDGE_USER/go GODEBUG=installgoroot=all HOME=/home/NEXTJUDGE_USER /home/NEXTJUDGE_USER/go/bin/go build -o /executable/main {IN_FILE}
"""


[[language]]
name = "javascript"
version = "21.6.2"
extension = "js"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo 'export PATH="/home/NEXTJUDGE_USER/.nvm/versions/node/v21.6.2/bin/:$PATH"' >> /executable/main
echo "node /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "typescript"
version = "5.4.5"
extension = "ts"
script= """
#!/bin/sh
export PATH="/home/NEXTJUDGE_USER/.nvm/versions/node/v21.6.2/bin/:$PATH"
export NODE_OPTIONS="--max_old_space_size=2048"
export GENERATE_SOURCEMAP=false
tsc {IN_FILE} --outfile main2

echo "#!/bin/sh" >> /executable/main
echo 'export PATH="/home/NEXTJUDGE_USER/.nvm/versions/node/v21.6.2/bin/:$PATH"' >> /executable/main
echo "node /build/main2" >> /executable/main
chmod +x /executable/main
"""


[[language]]
name = "ruby"
version = "3.2.3"
extension = "rb"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "/usr/bin/ruby /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""


[[language]]
name = "lua"
version = "5.4.6"
extension = "lua"
script= """
#!/bin/sh
echo "#!/bin/sh" >> /executable/main
echo "//home/NEXTJUDGE_USER/lua/5_4_6/bin/lua /build/{IN_FILE}" >> /executable/main
chmod +x /executable/main
"""

[[language]]
name = "java"
version = "21.0.3"
extension = "java"
script= """
#!/bin/bash

ERROR_MSG=$(/usr/bin/javac -d /executable "{IN_FILE}" 2>&1)

CLASS_FILE=$(ls /executable)

if [ -z "$CLASS_FILE" ]; then

    ERROR_CLASS_NAME=$(echo "$ERROR_MSG" | grep -oP 'class \\K\\w+(?= is public, should be declared in a file named \\w+\\.java)')

    if [ -z "$ERROR_CLASS_NAME" ]; then
        echo "No class name found in error message or no public class in file: {IN_FILE}" >&2
        echo "Error message: $ERROR_MSG" >&2
        exit 1
    fi

    mv "{IN_FILE}" "$ERROR_CLASS_NAME.java"

    /usr/bin/javac -d /executable "$ERROR_CLASS_NAME.java"

    CLASS_FILE="$ERROR_CLASS_NAME"
else
    CLASS_FILE=$(basename "$CLASS_FILE" .class)
fi


echo "#!/bin/sh" >> /executable/main
echo "/usr/bin/java -XX:+UseSerialGC -Xms1920m -Xmx1920m $CLASS_FILE" >> /executable/main
chmod +x /executable/main

cat /executable/main
"""


[[language]]
name = "kotlin"
version = "1.9.24"
extension = "kt"
script= """
#!/bin/sh

/home/NEXTJUDGE_USER/kotlinc/bin/kotlinc -d /executable {IN_FILE}

echo "#!/bin/sh" >> /executable/main
echo "/home/NEXTJUDGE_USER/kotlinc/bin/kotlin /executable/InputKt.class" >> /executable/main
chmod +x /executable/main

ls /executable
ls /build

"""



[[language]]
name = "haskell"
version = "9.4.7"
extension = "hs"
script= """
#!/bin/sh
/usr/bin/ghc {IN_FILE} -o /executable/main
"""


EOF


